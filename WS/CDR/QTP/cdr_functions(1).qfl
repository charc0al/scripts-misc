Set con=createobject("adodb.connection")
Set global_rs = createObject("adodb.recordset")
'Set rs=createobject("adodb.recordset")
con.Open "Driver=Oracle in OraHome92;Dbq=fd3a;Uid=pj7960;Pwd=compass1;"
con.CommandTimeout = 0

function viewCDR(policyNo)
	theBrowser.Navigate "http://msp0lwasd014.etdbw.com:9084/CompassDataRecord/#"
	jsPatch()
	js "document.getElementsByClassName('gwt-TextBox')[0].value='" & policyNo & "';"
	clickBtn "Search"
	wait 1
	js "header = document.getElementsByClassName('policyTableHeader');tableDiv = header[0].parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.nextSibling.nextSibling;rows = tableDiv.getElementsByTagName('tr');for(var i=0;i<rows.length;i++){rows[i].getElementsByTagName('td')[0].setAttribute('id','policy_'+rows[i].getElementsByTagName('td')[0].innerText.replace(/\s/,''));}"
	mouseEvent "policy_" & policyNo, "onclick"
	waitLoad()
end function

function clickTab(coverageName)
	clearValidationHilighting()
	js "var labels = document.getElementsByClassName('gwt-TabBar')[0].getElementsByClassName('gwt-Label');for(i=0;i<labels.length;i++){labels[i].setAttribute('id','Tab_'+labels[i].innerText);}"
	js "document.getElementById('Tab_" & coverageName & "').click()"
	waitLoad()
end function

function waitLoad()
	js "function waitLoad(){if((document.getElementsByAttribute('src','images/loading.gif').length == 0) || (document.getElementsByAttribute('src','images/loading.gif')[0].style.display != 'none')){window.setTimeout(waitLoad,200);}else{alert('Done loading.');}} waitLoad();"
	getMsgText()
end function

Public Function CamelCase(nm_str)
	str = LCase(nm_str)
	str = regExReplace(str,"[\/\\\.\s]+","-")
	Dim arr, i
	arr = Split(str, "-")
	For i = LBound(arr) + 1 To UBound(arr)
		arr(i) = UCase(Left(arr(i), 1)) & Mid(arr(i), 2)
	Next
	CamelCase = Join(arr, "")
End Function

function selectBenefit(benName)
	clearValidationHilighting()
	js "panel = document.getElementsByClassName('gwt-TabPanelBottom')[0];for(i=0;i<panel.children.length;i++){if(panel.children[i].style.display != 'none'){currentPane = panel.children[i];break;}}"
    js "benList = currentPane.getElementsByClassName('gwt-ListBox')[0];for(i=0;i<benList.children.length;i++){if(benList.children[i].innerText == '" & benName & "'){benList.value = benList.children[i].value;}}benList.fireEvent('onchange');"
	waitLoad()
end function

function getCancer(policy_no, ben_type, ben_name, req_date)
	set getCancer = getCoverage(policy_no, req_date, "cancer", "SCY927_BEN_CAN", ben_type, ben_name)
end function

function getAccident(policy_no, ben_type, ben_name, req_date)
	set getAccident = getCoverage(policy_no, req_date, "accident", "SCY915_BEN_ACC", ben_type, ben_name)
end function

function getCI(policy_no, ben_type, ben_name, req_date)
	set getCI = getCoverage(policy_no, req_date, "cib", "SCY924_BEN_CIB", ben_type, ben_name)
end function

function getGap(policy_no, ben_type, ben_name, req_date)
	set getGap = getCoverage(policy_no, req_date, "gap", "SCY908_BEN_GAP", ben_type, ben_name)
end function

function getCoverage(policy_no, req_date, coverage, covr_table, ben_type, ben_name)
	Set objFSO = createObject("Scripting.FileSystemObject")
	Set objReadFile = objFSO.openTextFile("C:\Documents and Settings\pj7960\Documents\scripts\WS\CDR\" & coverage & ".sql",1,false)
	query = objReadFile.ReadAll
	objReadFile.close
	Set tempRs=createobject("adodb.recordset")
	Set covr_rs=createobject("adodb.recordset")
	Set covr_rs=createobject("adodb.recordset")
	tempRs.Open "select *from case_data where cont_no = '" & policy_no & "';", con
	case_key = tempRs("CASE_KEY")
	tempRs.Close
	tempRs.open "select * from " & covr_table & " where CASE_KEY = " & case_key & " and PLAN_TYPE_ID_SUB_" & Right(covr_table, 3) & " = '" & ben_name & "';", con
	rpt_key = tempRs("RPT_KEY")
	tempRs.Close
	query = replace(query, "N_RQST_DT_IN", "'" & req_date & "'")
	query = replace(query, "N_BEN_DESC_IN", ben_type)
	query = replace(query, "N_RPT_KEY_IN", rpt_key)
	covr_rs.open query, con
	getCoverage = covr_rs
end function

function getPolicy(policy_no)
	Set pol_rs=createobject("adodb.recordset")
	Set tempRs=createobject("adodb.recordset")
	tempRs.open "select * from case_data where cont_no = '" & policy_no & "';", con
	case_key = tempRs("CASE_KEY")
	tempRs.Close
	pol_rs.open "select * from SCY901_BEN_POL, SCY909_BEN_CASD where scy901_ben_pol.case_key = " & case_key & " and scy909_ben_casd.case_key = " & case_key & ";", con
	set getPolicy = pol_rs
end function

function validatePolicyField(nm, col)
	validateField nm, col, global_rs, "Policy"
end function

function validateAccidentField(nm, col)
	validateField nm, col, global_rs, "Accident"
end function

function validateCibField(nm, col)
	validateField nm, col, global_rs, "CI"
end function
	
function validateCancerField(nm, col)
	validateField nm, col, global_rs, "Cancer"
end function

function validateGapField(nm, col)
	validateField nm, col, global_rs, "Gap"
end function

function validateField(nm, col, rs, tabName)
	Dim nm_id : nm_id = camelCase(nm)
	Environment("nm_id") = "VALUE_" & tabName & "_" & nm_id
	fieldValue = Browser("theBrowser").Page("thePage").WebElement("nm").GetROProperty("innertext")
	expectedValue = ""
	if(rs(col) <> "") then expectedValue = Cstr(rs(col))
	if(inStr(LCase(nm), "date")) then
		If regExMatch(fieldValue, "[0-9]+[\/\-][0-9]+") then fieldValue = CStr(CDate(regExReplace(fieldValue, "\s.*","")))
		if regExMatch(expectedValue, "[0-9]+\/[0-9]+") then expectedValue = CStr(CDate(expectedValue))
	end if
	js "document.getElementById('TITLE_" & tabName & "_" & nm_id & "').parentNode.style.background='#00ff00';" 
	js "document.getElementById('TITLE_" & tabName & "_" & nm_id & "').parentNode.setAttribute('validated','1');"
	hilightColor = "FF0000"
	if(expectedValue = fieldValue) then
		writeResults micPass, pol_no & ": " & tabName & " - " & nm, "On-screen and expected values match, " & quoted(expectedValue)
		hilightColor = "00FF00"
	else
		js "document.getElementById('VALUE_" & tabName & "_" & nm_id & "').innerText='" & quoted(fieldValue) & ", expected  " & quoted(expectedValue) & "';"
		writeResults micFail, pol_no & ": " & tabName & " - " & nm, "On-screen value " & quoted(fieldValue) & " =/= " & quoted(expectedValue) & "(expected)"
	end if
	js "document.getElementById('VALUE_" & tabName & "_" & nm_id & "').parentNode.style.background='#" & hilightColor & "';"
	js "document.getElementById('VALUE_" & tabName & "_" & nm_id & "').parentNode.setAttribute('validated','1');"
end function

function validatePolicy(pol_no)
	set global_rs = getPolicy(pol_no)

    validatePolicyField "Nature of business", "NATURE_BUS_POL"
	validatePolicyField "Industry Code", "IND_CODE_POL"
	validatePolicyField "Tax ID Number", "TAX_ID_NO_POL"
	validatePolicyField "Employer Type", "EMPLOYER_TYPE_POL"
	validatePolicyField "Legal Entity", "LEGAL_ENTTY_POL"
	validatePolicyField "Post Scheme Install Status", "POST_SCHEME_INSTALL_STAT_POL"
	validatePolicyField "Scheme Original Effective Date", "ORIG_EFF_DT_POL"
	'  ASSOCIATED COMPANIES ?
	validatePolicyField "Policy Issue State", "CONTRACT_ST_POL"
	validatePolicyField "Tax State", "TAX_ST_POL"
	validatePolicyField "Tax City", "CITY_CD_POL"
	validatePolicyField "Tax County", "COUNTY_POL"
	validatePolicyField "Block of Business Code", "BLOCK_BSNSS_POL"
	validatePolicyField "Cert Code", "CERT_PREP_CD_POL"
	validatePolicyField "Booklet Code", "SOLAR_CD_POL"
	validatePolicyField "Readable Code", "CTRT_POL"
	validatePolicyField "Scheme Provider", "COMPANY_CD_POL"
	validatePolicyField "Policy Type", "POL_TYPE_POL"

	validatePolicyField "Life claim pay", "CLAIM_PAY_LIF_POL"
	validatePolicyField "Dental claim pay", "CLAIM_PAY_DEN_POL"
	validatePolicyField "Disability claim pay", "CLAIM_PAY_LTD_POL"
	validatePolicyField "Discount card", "DISCOUNT_CARD_POL"
	validatePolicyField "Account Executive", "ACCT_EXEC_POL"
	validatePolicyField "Service Team", "SERV_TEAM_POL"
	validatePolicyField "Customer Tier", "CUSTOMER_TIER_POL"
	validatePolicyField "Manual Processing Required", "MANUAL_PROCESS_REQ_POL"
	validatePolicyField "Tier Reason", "TIER_REASON_POL"
	validatePolicyField "E-Commerce", "ECOMMERCE_POL"
	validatePolicyField "Distribution Channel", "DSTRB_CHNL_POL"
	validatePolicyField "Census indicator", "CENSUS_IND_POL"
	validatePolicyField "Marketing Arrangement", "MRKTNG_ARRNGMT_POL"
	validatePolicyField "Business Arrangement", "BSNSS_ARRANGMENT_POL"
	validatePolicyField "Initial Bill Prep", "BILL_CERT_PREP_POL"
	validatePolicyField "Employee Assistance Program", "EMP_ASST_PROG_POL"
	validatePolicyField "Multiple Systems", "MULTIPLE_SYSTEMS_POL"
	validatePolicyField "Other AEB Policies", "OTHER_FORTIS_POLICIES_POL"
	validatePolicyField "Employees outside the U.S.", "EMP_NOT_IN_USA_POL"
	validatePolicyField "Employees not A.A.W", "ACTVLY_AT_WORK_POL"
	validatePolicyField "Administration", "ADMIN_POL"
	validatePolicyField "Premium remitted net of TPA Allowance", "NET_TPA_ALLOW_POL"
	validatePolicyField "Premium remitted net of commission", "NET_COMM_POL"
	validatePolicyField "Privacy", "PRIVACY_POL"
	validatePolicyField "Remote", "REMOTE_POL"
	validatePolicyField "Status", "STATUS_POL"
	validatePolicyField "Status Date", "STATUS_DT_POL"

	validatePolicyField "Cancel/Rewrite/Spinoff", "ACTN_TYPE_POL"
	validatePolicyField "Cancel/Rewrite/Spinoff Old Scheme No.", "CANCEL_REWRITE_OLD_POL"
	validatePolicyField "Cancel/Rewrite/Spinoff Prior Coverage", "CASE_TYPE_COV_POL"

	validatePolicyField "Annual Enrollment Type", "ENRLL_TYPE_DEN_POL"
	validatePolicyField "Issue Begin Date", "ENRLL_BEG_PRD_DEN_POL"
	validatePolicyField "Issue End Date", "ENRLL_END_PRD_DEN_POL"
	validatePolicyField "Annual Enrollment Effective Date", "ANNUAL_ENRLL_EFF_DT_POL"
	validatePolicyField "Future Begin Date", "FUT_BEG_PRD_POL"
	validatePolicyField "Future End Date", "FUT_END_PRD_POL"

	validatePolicyField "ASO/CSO Dental Coverages", "ASO_CSO_COVG_DEN"
	validatePolicyField "ASO/CSO LTD Coverages", "ASO_CSO_COVG_LTD"
	validatePolicyField "ASO/CSO STD Coverages", "ASO_CSO_COVG_STD"
	validatePolicyField "ASO/CSO Plan Info", "ASO_CSO_PLAN_INFO_POL"
	validatePolicyField "ASO/CSO Policy Number", "ASO_CSO_POLICY_NUM_POL"
	validatePolicyField "Disability Benefit Tax Option", "DIS_BNFT_TAX_OPT_LTD_POL"

	validatePolicyField "Policy Anniversary Date", "POL_ANNIV_DT_POL"
	validatePolicyField "PARR Code", "PARR_CD_POL"
	validatePolicyField "Renewal Type", "RENEW_TYP_POL"
	validatePolicyField "Deliver Rate Letter", "DLVR_RT_LTTR_POL"
	validatePolicyField "Combined Dividends", "COMB_DIV_POL"
	validatePolicyField "Plans Combined for Rating", "PLAN_COMB_POL"
	validatePolicyField "Schemes Combined for Rating", "SCHEME_COMB_POL"
	validatePolicyField "Other Scheme Numbers", "OTH_SCHEM_NO_POL"
end function

function validateAccident(pol_no, ben_type, eff_dt)
	if (ben_type = "Child") then
		ben_name = "ACH/ACH1"
	elseif (ben_type = "Spouse") then
		ben_name = "ACS/ACS1"
	else
		ben_name = "ACC/ACC1"
	end if
	set global_rs = getAccident(pol_no, ben_type, ben_name, eff_dt)
	clickTab "Accident"
	selectBenefit (ben_type & " Accident")
	fixHtmlIDs "Accident"

	validateSection1 "ACC", "Accident"
	
	validateAccidentField "Issue Service Requirement", "ISS_SRVC_RQT_ACC"
	validateAccidentField "Mode 0", "ISS_SRVC_RQT_MOD_ACC"
	validateAccidentField "Future Service Requirement", "FUT_SRVC_RQT_ACC"
	validateAccidentField "Mode 1", "FUT_SRVC_RQT_MOD_ACC"
	validateAccidentField "Entry Date", "ENTRY_DT_ACC"
	validateAccidentField "Special Entry Date", "SPC_ENTRY_DT_ACC"
	validateAccidentField "Term Date", "TERM_DT_ACC"
	validateAccidentField "Special Term Date", "SPC_TERM_DT_ACC"
	validateAccidentField "Term Date Mode", "TERM_DT_MODE_ACC"
	
	validateAccidentField "Accident Type", "ACC_TYPE"
	validateAccidentField "Spouse Disability Benefit", "SP_DSBLTY_DUR"
	validateAccidentField "Spouse Disability Benefit Amount", "SP_DSBLTY_AMT"
	validateAccidentField "Wellness", "WELLNESS_BNFT_ACC"
	validateAccidentField "Emergency Room", "EMERGENCY_ROOM"
	validateAccidentField "Non-Emergency Room", "NON_EMERG_ROOM"
	validateAccidentField "Employee Accidental Death", "ACCIDENTAL_DEATH"

	validateAccidentField "Child Limiting Age", "CH_MAX_AGE_ACC"
	validateAccidentField "Student Max Age", "STUDENT_AGE_ACC"
	validateAccidentField "Contract Type", "CNTRCT_TYPE_ACC"
	validateAccidentField "Seies", "SERIES_ACC"
	
	validateAccidentField "Section 125", "S125_PLAN_ACC"
	validateAccidentField "Section 125 Tax Option", "S125_TAX_ACC"
	validateAccidentField "Employer Contribution Amount", "EMP_CNTRB_TYP_ACC"
	'validateAccidentField "Number of Eligible Employees", "NUM_ELIG_DEP_ACC"
	validateAccidentField "Commission Scale", "COMM_SCALE_ACC"
	validateAccidentField "Service Fee", "SERVICE_FEE_ACC"
	validateAccidentField "Brokers Broker Fee", "BROKER_FEE_ACC"
	
	validateAccidentField "Solar Group ID", "SOLAR_GRP_ID_ACC"
	validateAccidentField "Solar Seq No", "SOLAR_SEQ_NUM_ACC"
	validateAccidentField "Solar Sched. Seq. No", "SOLAR_SCHED_SEQ_NUM_ACC"
	validateAccidentField "Application Signature Date", "APP_SIG_DT_ACC"
	validateAccidentField "Plan Type", "PLAN_TYPE_ACC"
	validateAccidentField "Sub Plan/Plan ID", "PLAN_TYPE_ID_SUB_ACC"
	validateAccidentField "Administration Type", "SL_RTNG_ADMIN_ACC"
	validateAccidentField "TPA Allowance Percent", "TPA_ALLOW_ACC"
	validateAccidentField "Risk", "RISK_ACC"
	validateAccidentField "Actual Participation Percentage", "ACT_PARTIC_PCT_ACC"
	validateAccidentField "Rate Guarantee in Months", "RATE_GUAR_MO_ACC"
	validateAccidentField "Pooling Code", "POOLING_CD_ACC"
	validateAccidentField "Rate Change Reason Code", "RT_CHG_RSN_CD_ACC"
	validateAccidentField "Age-Banded Rates", "AGE_RATES_ACC"
end function

function validateCib(pol_no, ben_type, eff_dt)
   	if (ben_type = "Child") then
		ben_name = "CIC/CIC1"
		msgBox "CIC/CIC1"
	elseif (ben_type = "Spouse") then
		ben_name = "CIS/CIS1"
		msgBox "CIS/CIS1"
	elseif (ben_type = "Employee") then
		ben_name = "CIB/CIB1"
		msgBox "CIB/CIB1"
	end if

	set global_rs = getCI(pol_no, ben_type, ben_name, eff_dt)

	clickTab "Critical Illness"
	selectBenefit ben_type & " Critical Illness"
	fixHtmlIds "CI"

	validateSection1 "CIB", "CI"
	
	validateCibField "Issue Service Requirement", "ISS_SRVC_RQT_CIB"
	validateCibField "Mode 0", "ISS_SRVC_RQT_MOD_CIB"
	validateCibField "Future Service Requirement", "FUT_SRVC_RQT_CIB"
	validateCibField "Mode 1", "FUT_SRVC_RQT_MOD_CIB"
	validateCibField "Entry Date", "ENTRY_DT_CIB"
	validateCibField "Special Entry Date", "SPC_ENTRY_DT_CIB"
	validateCibField "Term Date", "TERM_DT_CIB"
	validateCibField "Special Term Date", "SPC_TERM_DT_CIB"
	validateCibField "Term Date Mode", "TERM_DT_MODE_CIB"
	
	validateCibField "Level", "LEVEL_CIB"
	validateCibField "Wellness", "WELLNESS_CIB"
	validateCibField "Recurrence Benefit", "RECRRNC_CIB"
	validateCibField "Recurrence Timeframe", "RECRRNC_TIME_CIB"
	validateCibField "Additional Occurance", "ADDNL_OCCRNC_CIB"
	
	validateCibField "Employee Minimum Schedule Amount", "MIN_BNFT_EE_CIB"
	validateCibField "Employee Maximum Schedule Amount", "MAX_BNFT_EE_CIB"
	validateCibField "Spouse Minimum Schedule Amount", "MIN_BNFT_SP_CIB"
	validateCibField "Spouse Maximum Schedule Amount", "MAX_BNFT_SP_CIB"
	validateCibField "Child Minimum Schedule Amount", "MIN_BNFT_CH_CIB"
	validateCibField "Child Maximum Schedule Amount", "MAX_BNFT_CH_CIB"
	validateCibField "Employee Unit Amount", "UNIT_AMT_CIB"
	validateCibField "Employee GI", "EMPLOYEE_GI_CIB"
	validateCibField "Unit of Rounding for Age Deductions", "REDUC_RND_AMT_CIB"
	validateCibField "Rounding Type", "REDUC_RND_TYP_CIB"
	validateCibField "Reduction", "REDUCTION_CIB"
	'validateCibField "Minimum Participation for GI", "????"
	validateCibField "Pre-Existing", "PRE_EXST_CIB"
	'validateCibField "Census Age Type", "????"
	validateCibField "Waive Prior Coverage Pre Ex", "PR_CVG_CIB"
	validateCibField "Increase Subject To New Pre Ex", "INCR_PRE_EXST_CIB"

	validateCibField "Student Max Age", "STUD_MAX_AGE_CIB"
	validateCibField "Contract Type", "CNTRCT_TYPE_CIB"
	validateCibField "Seies", "SERIES_CIB"
	
	validateCibField "Section 125", "S125_PLAN_CIB"
	validateCibField "Section 125 Tax Option", "S125_TAX_CIB"
	validateCibField "Employer Contribution Amount", "EMP_CNTRB_MO_CIB"
	validateCibField "Employee Contribution Amount", "EE_CNTRB_MO_CIB"
	validateCibField "Commission Scale", "COMM_SCALE_CIB"
	validateCibField "Minimum Number of Participating Lives", "MIN_PART_LVS_CIB"
	validateCibField "Service Fee", "SERVICE_FEE_CIB"
	validateCibField "Brokers Broker Fee", "BROKER_FEE_CIB"
	
	validateCibField "Solar Group ID", "SOLAR_GRP_ID_CIB"
	validateCibField "Solar Sched. Seq. No", "SOLAR_SCHED_SEQ_NUM_CIB"
	validateCibField "Solar Seq No", "SOLAR_SEQ_NUM_CIB"
	validateCibField "Application Signature Date", "APP_SIG_DT_CIB"
	validateCibField "Plan Type", "PLAN_TYPE_CIB"
	validateCibField "Sub Plan/Plan ID", "PLAN_TYPE_ID_SUB_CIB"
	validateCibField "Administration Type", "SL_RTNG_ADMIN_CIB"
	validateCibField "TPA Allowance Percent", "TPA_ALLOW_CIB"
	validateCibField "Risk", "RISK_CIB"
	validateCibField "Actual Participation Percentage", "ACT_PARTIC_PCT_CIB"
	validateCibField "Rate Guarantee in Months", "RATE_GUAR_MO_CIB"
	validateCibField "Pooling Code", "POOLING_CD_CIB"
	validateCibField "Rate Change Reason Code", "RT_CHG_RSN_CD_CIB"
	validateCibField "Age-Banded Rates", "AGE_RATES_CI"
end function

function validateCancer(pol_no, eff_dt)
	set global_rs = getCancer(pol_no, eff_dt)
	clickTab "Cancer"
	selectBenefit "Employee Cancer"
	fixHtmlIDs "Cancer"
	js "document.getElementById('TITLE_Cancer_planType').setAttribute('id','TITLE_Cancer_planType0');"
	js "document.getElementById('VALUE_Cancer_planType').setAttribute('id','VALUE_Cancer_planType0');"
	
	validateSection1 "CAN", "Cancer"
	validateSection2 "CAN", "Cancer"
	
	validateCancerField "Pre-Existing", "PRE_EXIST_CAN"
	
	validateSectionClassMbrGrp "CAN", "Cancer"
	validateSection125 "CAN", "Cancer"
	validateSectionSolar "CAN", "Cancer"
end function

function validateGap(pol_no, eff_dt)
	Set global_rs = getGap(pol_no, eff_dt)
	clickTab "Gap"
	selectBenefit "Employee Gap"
	
	fixHtmlIDs "Gap"
	
	validateSection1 "GAP", "Gap"
	validateSection2 "GAP", "Gap"
	
	validateGapField "Inpatient", "INPATIENT_BNFT_GAP"
	validateGapField "Outpatient", "OUTPATIENT_BNFT_GAP"
	validateGapField "Physician", "PHYSICIAN_BNFT_GAP"
	validateGapField "Wellness", "WELLNESS_BNFT_GAP"
	validateGapField "Benefit Year", "BNFT_YEAR_GAP"
	
	validateSectionClassMbrGrp "GAP", "Gap"
	validateSection125 "GAP", "Gap"
	validateSectionSolar "GAP", "Gap"
end function

function fixHtmlIDs(coverageName)
	js "panel = document.getElementsByClassName('gwt-TabPanelBottom')[0];for(i=0;i<panel.children.length;i++){if(panel.children[i].style.display != 'none'){currentPane = panel.children[i];break;}}"
	js "theTable = currentPane.getElementsByTagName('table')[0];"
	js "labels = theTable.getElementsByClassName('gwt-Label');"
	js "function camelCase(str){camelStr = str.replace(/([\s\-\\\/]+[a-zA-Z])/g, function($1){return $1.toUpperCase().replace(/[\s\\\-\/]/,'')});return camelStr.replace(/^[A-Z]/, function($1){return $1.toLowerCase();});} for(i=0;i<labels.length;i++){if((!labels[i].getAttribute('id')) && (labels[i].style.fontWeight=='bold')){labels[i].setAttribute('id','TITLE_" & coverageName & "_'+camelCase(labels[i].innerText).replace(':',''));labels[i+1].setAttribute('id','VALUE_" & coverageName & "_'+camelCase(labels[i].innerText).replace(':',''));}}"
	js "document.getElementsByAttribute('id','VALUE_" & coverageName & "_mode')[1].setAttribute('id','VALUE_" & coverageName & "_mode1');document.getElementsByAttribute('id','TITLE_" & coverageName & "_mode')[1].setAttribute('id','TITLE_" & coverageName & "_mode1');"
	js "document.getElementsByAttribute('id','VALUE_" & coverageName & "_mode')[0].setAttribute('id','VALUE_" & coverageName & "_mode0');document.getElementsByAttribute('id','TITLE_" & coverageName & "_mode')[0].setAttribute('id','TITLE_" & coverageName & "_mode0');"
end function

function validateSection1(abbr, covr)
	validateField "Benefit Effective Date", "BNTP_EFF_DT_" & abbr, global_rs, covr
	validateField "Coverage Original Effective Date", "COVG_ORIG_EFF_DATE_" & abbr, global_rs, covr
	validateField "Contracts Eligible Class", "ELGBL_PRSN_" & abbr, global_rs, covr
	validateField "Member Group Description", "MBR_GRP_DESC_" & abbr, global_rs, covr
	validateField "Solar Member Group Key", "SLR_MBR_GRP_KEY_" & abbr, global_rs, covr
	validateField "Domestic Partner", "DOMESTIC_PARTNER_" & abbr, global_rs, covr
	validateField "Minimum Periodic Hours", "MIN_PERIODIC_HRS_" & abbr, global_rs, covr
	validateField "Periodic Hours Definition", "PERIODIC_HRS_DEF_" & abbr, global_rs, covr
	validateField "Contribution Type", "CONTRIB_" & abbr, global_rs, covr
	if not (covr = "Accident") then
		validateField "Contractual Participation Percent", "CONTRACT_PART_" & abbr, global_rs, covr
	end if
	'validateField "Policyholder Maintains Beneficiary", "??", global_rs, covr
	validateField "Participation Agreement", "PARTIC_ARRNGMT_" & abbr, global_rs, covr
	validateField "Bill Proration Method", "BILL_PROR_METH_" & abbr, global_rs, covr
	validateField "This is a benefit", "THIS_IS_A_CELL_BEN_" & abbr, global_rs, covr
end function

function validateSection2(abbr, covr)
	validateField "Issue Service Requirement", "ISS_SRVC_RQT_" & abbr, global_rs, covr
	validateField "Mode 0", "ISS_SRVC_RQT_MOD_" & abbr, global_rs, covr
	validateField "Future Service Requirement", "FUT_SRVC_RQT_" & abbr, global_rs, covr
	validateField "Mode 1", "FUT_SRVC_RQT_MOD_" & abbr, global_rs, covr
	validateField "Entry Date", "ENTRY_DT_" & abbr, global_rs, covr
	validateField "Special Entry Date", "SPC_ENTRY_DT_" & abbr, global_rs, covr
	validateField "Term Date", "TERM_DT_" & abbr, global_rs, covr
	validateField "Special Term Date", "SPC_TERM_DT_" & abbr, global_rs, covr
	validateField "Term Date Mode", "TERM_DT_MODE_" & abbr, global_rs, covr
end function

function validateSectionSolar(abbr, covr)
	validateField "Solar Group ID", "SOLAR_GRP_ID_" & abbr, global_rs, covr
	validateField "Solar Sched. Seq. No", "SOLAR_SCHED_SEQ_NUM_" & abbr, global_rs, covr
	validateField "Solar Seq No", "SOLAR_SEQ_NUM_" & abbr, global_rs, covr
	validateField "Application Signature Date", "APP_SIG_DT_" & abbr, global_rs, covr
	validateField "Plan Type", "PLAN_TYPE_" & abbr, global_rs, covr
	validateField "Sub Plan/Plan ID", "PLAN_TYPE_ID_SUB_" & abbr, global_rs, covr
	validateField "Administration Type", "SL_RTNG_ADMIN_" & abbr, global_rs, covr
	validateField "TPA Allowance Percent", "TPA_ALLOW_" & abbr, global_rs, covr
	validateField "Risk", "RISK_" & abbr, global_rs, covr
	validateField "Actual Participation Percentage", "ACT_PARTIC_PCT_" & abbr, global_rs, covr
	validateField "Rate Guarantee in Months", "RATE_GUAR_MO_" & abbr, global_rs, covr
	validateField "Pooling Code", "POOLING_CD_" & abbr, global_rs, covr
	validateField "Rate Change Reason Code", "RT_CHG_RSN_CD_" & abbr, global_rs, covr
	if (abbr = "CIB") then abbr = "CI"
	validateField "Age-Banded Rates", "AGE_RATES_" & abbr, global_rs, covr
end function

function validateSection125(abbr, covr)
	validateField "Section 125", "S125_PLAN_" & abbr, global_rs, covr
	validateField "Section 125 Tax Option", "S125_TAX_" & abbr, global_rs, covr
	if not (abbr = "GAP") then
		validateField "Employer Contribution Amount", "EMP_CNTRB_MO_" & abbr, global_rs, covr
	end if
	if not (abbr = "CAN" or abbr = "ACC" or abbr = "GAP") then
		validateField "Employee Contribution Amount", "EE_CNTRB_MO_" & abbr, global_rs, covr
	end if
	validateField "Commission Scale", "COMM_SCALE_" & abbr, global_rs, covr
	if not (abbr = "CAN" or abbr = "GAP") then
		validateField "Minimum Number of Participating Lives", "MIN_PART_LVS_" & abbr, global_rs, covr
	end if
	validateField "Service Fee", "SERVICE_FEE_" & abbr, global_rs, covr
	validateField "Brokers Broker Fee", "BROKER_FEE_" & abbr, global_rs, covr
end function

function validateSectionClassMbrGrp(abbr, covr)
	if not (abbr = "CAN" or abbr = "CIB") then
		validateField "Child Limiting Age", "CH_MAX_AGE_" & abbr, global_rs, covr
	end if
	if not (abbr = "GAP") then
		validateField "Student Max Age", "STUD_MAX_AGE_" & abbr, global_rs, covr
	end if
	validateField "Contract Type", "CNTRCT_TYPE_" & abbr, global_rs, covr
	validateField "Seies", "SERIES_" & abbr, global_rs, covr
end function

